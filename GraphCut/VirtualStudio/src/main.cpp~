#include <stdlib.h>
#include <stdio.h>
#include "Disk.h"
#include "Timer.h"
#include "OptFileParser.h"
#include "Driver.h"

/*
#include "VStudioWin.h"
#include "ImageIO.h"
#include "SampleTest.h"
#include "MVFlow.h"
#include "GCFlow.h"
#include "Transform-3x3.h"
#include "Transform-2x2.h"
#include "SuperRes.h"
#include "FlowHelper.h"

#include "SuperResWin.h"
*/

/*
int main(int args, char *argv[])
{
	Timer t;
	Disk::FilesInPattern("/projects/null/grail54/*");
	printf("Hello world.\n");
	t.DumpSeconds("done.");
	return 0;
}
*/

//#if 0


/*
int main(int args, char *argv[])
{
	SuperResWin superResWin;
	superResWin.Start(args, argv);
}
//*/

/*
int main(int args, char *argv[])
{
	if(args < 3)
	{
		REPORT_FAILURE("Usage: training-img-count training-img target-img\n");
		exit(0);
	}

	SuperRes::SuperResParams params = SuperRes::SuperResParams::Default();

	vector<CFloatImage> trainingImages;
	int trainingImgCount = atoi(argv[1]);
	for(int iData = 0; iData < trainingImgCount; iData++)
	{
		CFloatImage trainingImg;
		ImageIO::ReadFile(trainingImg, argv[2 + iData]);
		trainingImg = SuperRes::GetCroppedImg(trainingImg, params.downSampleScale);
		trainingImages.push_back(trainingImg);
	}	


	CFloatImage targetImg;	
	ImageIO::ReadFile(targetImg, argv[2 + trainingImgCount]);	
	targetImg = SuperRes::GetCroppedImg(targetImg, params.downSampleScale);

	params.annErrorBound = 0.1;
	params.outPrefix = Disk::GetFileNameID(argv[2 + trainingImgCount]);
	SuperRes superRes(params);
	superRes.TrainSuperRes(trainingImages);
	superRes.ComputeSuperRes(targetImg);

	//for(int iFrame = 0; iFrame <= 50; iFrame++)
	//{
	//	//if(iFrame == 1) continue; //bug

	//	char vidName[1024];
	//	sprintf(vidName, "test-%04i", iFrame);		
	//	string vidPrefix = vidName;	

	//	CFloatImage targetImg;
	//	ImageIO::ReadFile(targetImg, vidPrefix + ".tga");
	//	//targetImg = SuperRes::GetCroppedImg(targetImg, params.downSampleScale);
	//	
	//	CFloatImage flowField(targetImg.Shape());
	//	CFloatImage warpResult(targetImg.Shape());

	//	//if(iFrame > 1)
	//	//{
	//	//	fclose(stderr);

	//	//	sprintf(vidName, "test-%04i", iFrame - 1);
	//	//	string prevVidPrefix = vidName;
	//	//	CFloatImage prevImg;
	//	//	ImageIO::ReadFile(prevImg, prevVidPrefix + ".tga");
	//	//	prevImg = SuperRes::GetCroppedImg(prevImg, params.downSampleScale);

	//	//	FlowHelper::ComputeFlow(prevImg, targetImg, flowField);

	//	//	CFloatImage prevResult;
	//	//	ImageIO::ReadRaw(prevResult, prevVidPrefix + ".raw");
	//	//	ENSURE(prevResult.Shape() == targetImg.Shape());

	//	//	CByteImage warpMask(targetImg.Shape().width, targetImg.Shape().height, 1);
	//	//	CByteImage srcMask(warpMask.Shape());
	//	//	ImageProcessing::Operate(srcMask, srcMask, MASK_VALID, ImageProcessing::OP_SET);

	//	//	FlowHelper::WarpImage(warpResult, warpMask, prevResult, srcMask, flowField, false);

	//	//	CFloatImage test2 = warpResult.Clone();			
	//	//	ImageProcessing::Operate(test2, test2, 5.0f, ImageProcessing::OP_MUL);
	//	//	ImageProcessing::Operate(test2, test2, 128.0f, ImageProcessing::OP_ADD);
	//	//	ImageProcessing::Operate(test2, test2, 255.0f, ImageProcessing::OP_DIV);	
	//	//	ImageIO::WriteFile(test2, vidPrefix + "-warp.tga");

	//	//	int nodeCode = targetImg.Shape().width * targetImg.Shape().height;
	//	//	for(int iNode = 0; iNode < nodeCode; iNode++)
	//	//	{
	//	//		if(warpMask[iNode] == MASK_INVALID)
	//	//			flowField[(iNode * 3) + 2] = 0.0f;
	//	//	}
	//	//}			
	//	
	//	params.annErrorBound = 0.1;
	//	params.outPrefix = vidPrefix;
	//	SuperRes superRes(params);
	//	superRes.TrainSuperRes(trainingImages);
	//	//bug
	//	//if(iFrame > 1)
	//	//	superRes.UsePrevResult(flowField, warpResult);

	//	//superRes.VisLabels(targetImg, 143, targetImg.Shape().height - 130);
	//	//exit(0);
	//	superRes.ComputeSuperRes(targetImg);
	//}
}
//*/

/*
int main(int args, char *argv[])
{
	if(args < 3)
	{
		REPORT_FAILURE("Usage: training-pair-count a aPrime target-img\n");
		exit(0);
	}

	vector<CFloatImage> aImgs;
	vector<CFloatImage> aPrimeImgs;
	int trainingImgCount = atoi(argv[1]);
	for(int iData = 0; iData < 2 * trainingImgCount; iData += 2)
	{
		CFloatImage aImg;
		CFloatImage aPrimeImg;
		ImageIO::ReadFile(aImg, argv[2 + iData]);
		ImageIO::ReadFile(aPrimeImg, argv[2 + iData + 1]);
		aImgs.push_back(aImg);
		aPrimeImgs.push_back(aPrimeImg);
	}

	CFloatImage targetImg;	
	ImageIO::ReadFile(targetImg, argv[2 + (2 * trainingImgCount)]);

	SuperRes::SuperResParams params = SuperRes::SuperResParams::Default();
	SuperRes superRes(params);
	superRes.TrainFilter(aImgs, aPrimeImgs);

	superRes.ComputeFilter(targetImg);
}
//*/




/*
int main(int args, char *argv[])
{
	if(args < 3)
	{
		REPORT_FAILURE("Usage: img1 img2 <alphaBC> <alphaGC> <beta>\n");
		exit(0);
	}
	CFloatImage img1, img2;
	ImageIO::ReadFile(img1, argv[1]);
	ImageIO::ReadFile(img2, argv[2]);

	GCFlow gcFlow(img1, img2);
	GCFlow::GCFlowParams gcFlowParams = GCFlow::GCFlowParams::Default();

	if(args >= 4) gcFlowParams.alphaBC = (float) atof(argv[3]);
	if(args >= 5) gcFlowParams.alphaGC = (float) atof(argv[4]);
	if(args >= 6) gcFlowParams.beta    = (float) atof(argv[5]);

	CFloatImage uImg, vImg;
	gcFlow.ComputeFlow(gcFlowParams, uImg, vImg);
	ImageProcessing::PrintImageStats(uImg);
	ImageProcessing::PrintImageStats(vImg);

	ImageProcessing::Rescale(uImg, 0.0f, 1.0f);
	ImageProcessing::Rescale(vImg, 0.0f, 1.0f);
	ImageIO::WriteFile(uImg, "u.tga");
	ImageIO::WriteFile(vImg, "v.tga");
}
//*/

/*
int main(int args, char *argv[])
{
	if(args < 3)
	{
		REPORT_FAILURE("Usage: img1 img2 <alphaBC> <alphaGC> <beta>\n");
		exit(0);
	}
	CFloatImage img1, img2;
	ImageIO::ReadFile(img1, argv[1]);
	ImageIO::ReadFile(img2, argv[2]);

	MVFlow mvFlow(img1, img2);
	MVFlow::MVFlowParams mvFlowParams = MVFlow::MVFlowParams::Default();

	if(args >= 4) mvFlowParams.alphaBC = (float) atof(argv[3]);
	if(args >= 5) mvFlowParams.alphaGC = (float) atof(argv[4]);
	if(args >= 6) mvFlowParams.beta    = (float) atof(argv[5]);

	mvFlow.ComputeFlow(mvFlowParams);
}
//*/

/*
int main(int args, char *argv[])
{
	if(args != 7)
	{
		printf("[usage] %s no-flash-img flash-img spaceStdDev sigStdDev kernelsize out-img\n", argv[0]);
		exit(EXIT_FAILURE);
	}

	CFloatImage noFlashImg;
	CFloatImage flashImg;
	CFloatImage outImg;

	ImageIO::ReadFile(noFlashImg, argv[1]);
	ImageIO::ReadFile(flashImg, argv[2]);

	float spaceStdDev = (float) atof(argv[3]);
	float sigStdDev = (float) atof(argv[4]);
	int kernelSize = atoi(argv[5]);

	int kernelWidth = kernelSize * 2 + 1;


	CFloatImage flashBase = ImageProcessing::BilateralFilter(flashImg, 
															 spaceStdDev, 
															 sigStdDev, 
															 kernelWidth);
	CFloatImage detailImg = flashImg.Clone();
	ImageProcessing::Operate(flashBase, flashBase, 0.02f, ImageProcessing::OP_ADD);
	ImageProcessing::Operate(detailImg, detailImg, 0.02f, ImageProcessing::OP_ADD);
	ImageProcessing::Operate(detailImg, detailImg, flashBase, ImageProcessing::OP_DIV);

	outImg = ImageProcessing::CrossBilateralFilter(noFlashImg, flashImg, detailImg,
												   spaceStdDev, 
												   sigStdDev, 
												   kernelWidth);

	printf("\n");

	ImageIO::WriteFile(outImg, argv[6]);

	return EXIT_SUCCESS;
}
//*/

///*
int main(int args, char *argv[])
{
	int exitCode = EXIT_SUCCESS;

	if(args < 2)
	{
		printf("[usage] %s options-filename\n", argv[0]);
		exit(EXIT_FAILURE);
	}

	OptFileParser optionsParser;
	OptFileParser::OptFileParams params = optionsParser.Load(argv[1], argv + 2);

	Driver driver(params);
	driver.Start();

	//VStudioWin vsWin;
	//exitCode = vsWin.Start(params);

	return exitCode;
}
//*/

/*
int main(int args, char *argv[])
{
	char *memBuff = new char[10];

	char *memBuffPtr = memBuff;

	int x = 10;
	unsigned short y = 3;
	float z = 3.14f;

	WRITE_INT(&memBuffPtr, x);
	WRITE_USHORT(&memBuffPtr, y);
	WRITE_FLOAT(&memBuffPtr, z);

	int xx = -1;
	unsigned short yy = 1;
	float zz = -1.0f;

	memBuffPtr = memBuff;
	READ_INT(&memBuffPtr, xx);
	READ_USHORT(&memBuffPtr, yy);
	READ_FLOAT(&memBuffPtr, zz);

	PRINT_INT(xx);
	PRINT_INT(yy);
	PRINT_FLOAT(zz);
}
*/

//#endif

#include "MotionFromMatches.h"
#include "Debug.h"
#include "Timer.h"
#include "mkl_lapack.h"
#include <math.h>
#include "fmatrix.h"
#include "matrix.h"

MotionFromMatches::MotionFromMatches(const FeatureSet &source, 
								     const FeatureSet &target, 
								     const FeatureMatches &sourceToTargetMatches) : sourceSet(source), 
																			        targetSet(target),
																				    matches(sourceToTargetMatches)
{
	this->matchesPicked = new bool[this->matches.size()];
	memset(this->matchesPicked, 0, sizeof(*this->matchesPicked) * this->matches.size());

	this->targetsPicked = new bool[this->targetSet.size()];
	memset(this->targetsPicked, 0, sizeof(*this->targetsPicked) * this->targetSet.size());
}

MotionFromMatches::~MotionFromMatches()
{
	delete this->matchesPicked;
	delete this->targetsPicked;
}

void MotionFromMatches::getRandomMatches(FeatureMatchSet &randSet, int count)
{	
	ENSURE((int) randSet.size() >= count);
	int totalMatches = (int) this->matches.size();
	ENSURE(totalMatches >= count);

	int iterationCount = 0;
	int matchesFound   = 0;
	while(matchesFound < count)
	{
		int matchIndex  = (myRand() % totalMatches);
		int targetIndex = this->matches[matchIndex].second;
		
		if((this->matchesPicked[matchIndex]  == false) &&  
		   (this->targetsPicked[targetIndex] == false))
		{	
			randSet[matchesFound] = matchIndex;
			this->matchesPicked[matchIndex]  = true;
			this->targetsPicked[targetIndex] = true;
			matchesFound++;
		}

		iterationCount++;
		ENSURE(iterationCount < 300);
	}

	for(int iMatchPicked = 0; iMatchPicked < count; iMatchPicked++)
	{
		int matchIndex = randSet[iMatchPicked];
		this->matchesPicked[matchIndex] = false;

		int targetIndex = this->matches[matchIndex].second;
		this->targetsPicked[targetIndex] = false;
	}
}

int MotionFromMatches::solveForMotion(FeatureMatchSet &matchSet, Motion &motion)
{
	vector<CorrespondancePt> correspondancePts(matchSet.size());

	for(uint iMatch = 0; iMatch < matchSet.size(); iMatch++)
	{
        uint matchIndex = matchSet[iMatch];
		FeatureMatch matchPair = this->matches[matchIndex];
		const Feature &sourceFeature = this->sourceSet[matchPair.first];
		const Feature &targetFeature = this->targetSet[matchPair.second];	

		correspondancePts[iMatch].first.first   = sourceFeature.x;
		correspondancePts[iMatch].first.second  = sourceFeature.y;
		correspondancePts[iMatch].second.first  = targetFeature.x;
		correspondancePts[iMatch].second.second = targetFeature.y;
	}

	return MotionFromMatches::SolveForMotion(correspondancePts, motion);
}

int MotionFromMatches::SolveForMotion(const vector<CorrespondancePt> &correspondancePts, Motion &motion)
{
	int returnVal = 1;

	switch(motion.type)
	{
	case MT_FUNDAMENTAL_MATRIX:
		ENSURE(correspondancePts.size() >= MotionFromMatches::MinMatchesToSolveFM);
		returnVal = MotionFromMatches::solveForFundamentalMatrix(correspondancePts, motion);
		break;

	case MT_HOMOGRAPHY:
		ENSURE(correspondancePts.size() >= MotionFromMatches::MinMatchesToSolveHG);
		returnVal = MotionFromMatches::solveForHomography(correspondancePts, motion);
		break;

	case MT_RIGID_ALIGN:
		ENSURE(correspondancePts.size() >= MotionFromMatches::MinMatchesToSolveRA);
		returnVal = MotionFromMatches::solveForRigidAlign(correspondancePts, motion);
		break;

	default:
		REPORT_FAILURE("Unknown motion type");
		break;
	}

	return returnVal;
}

void MotionFromMatches::getInliers(Motion &predictedMotion, float inlierThres, FeatureMatchSet &inliers)
{	
	inliers.clear();
	int matchIndex = 0;
	for(FeatureMatches::const_iterator currMatch = this->matches.begin();
		currMatch != this->matches.end();
		currMatch++, matchIndex++)
	{
		const Feature &sourceFeature = this->sourceSet[currMatch->first];
		const Feature &targetFeature = this->targetSet[currMatch->second];

		if(MotionFromMatches::IsInlier(sourceFeature, targetFeature,
									   predictedMotion, inlierThres) == true)
		{
			inliers.push_back(matchIndex);
		}
	}
}

bool MotionFromMatches::IsInlier(const Feature &sourceFea, const Feature &targetFea,
								 const Motion &motion, float inlierThres)
{
	bool returnVal = false;

	switch(motion.type)
	{
	case MT_FUNDAMENTAL_MATRIX:
		returnVal = MotionFromMatches::isFundamentalMatrixInlier(sourceFea, targetFea, 
																 motion, inlierThres);
		break;

	case MT_HOMOGRAPHY:
		returnVal = MotionFromMatches::isHomographyInlier(sourceFea, targetFea, 
														  motion, inlierThres);
		break;

	case MT_RIGID_ALIGN:
		returnVal = MotionFromMatches::isRigidAlignInlier(sourceFea, targetFea, 
														  motion, inlierThres);
		break;


	default:
		REPORT_FAILURE("Unknown motion type");
		break;
	}

	return returnVal;
}


Motion MotionFromMatches::GetDominantMotion(FeatureMatchSet &inliers, 
											MotionType motionType, 
											MotionFromMatchesParams params)
{
	int minMatchesToSolveMotion = MotionFromMatches::GetMinMatchesToSolveMotion(motionType);
	ENSURE(params.minInliers >= minMatchesToSolveMotion);
	
	inliers.clear();

	Motion motion;
	motion.type = motionType;

	if((int) this->matches.size() < params.minInliers)
	{
		return motion;
	}

	FeatureMatchSet randSet;
	randSet.resize(minMatchesToSolveMotion);

	Motion predictedMotion;
	predictedMotion.type = motionType;
	FeatureMatchSet predictedInliers;
	for(int iter = 0; iter < params.ransacIter; iter++)
	{
		getRandomMatches(randSet, minMatchesToSolveMotion);
		int returnVal = solveForMotion(randSet, predictedMotion);
		ENSURE(returnVal == 0);
		predictedInliers.clear();
        getInliers(predictedMotion, params.inlierThres, predictedInliers);

		if(predictedInliers.size() > inliers.size())
		{
			inliers = predictedInliers;
			motion = predictedMotion;
		}
	}

	if((int) inliers.size() >= params.minInliers)
	{
		if(motionType != MT_RIGID_ALIGN)
		{
			int returnVal = solveForMotion(inliers, motion);
			ENSURE(returnVal == 0);

			getInliers(motion, params.inlierThres, inliers);
			ENSURE((int)inliers.size() > minMatchesToSolveMotion);		
		}

		motion.sourceFeatures = (FeatureSet *) &this->sourceSet;
		motion.targetFeatures = (FeatureSet *) &this->targetSet;
		motion.matches.reserve(inliers.size());
		for(uint iInlier = 0; iInlier < inliers.size(); iInlier++)
		{
			int iMatch = inliers[iInlier];
			motion.matches.push_back(this->matches[iMatch]);
		}	
	}
	else
	{
		inliers.clear();
	}

	return motion;
}

int MotionFromMatches::solveForHomography(const vector<CorrespondancePt> &pts, Motion &motion)
{
	ENSURE(motion.type == MT_HOMOGRAPHY);
	ENSURE(pts.size() >= MotionFromMatches::MinMatchesToSolveHG);

	vector<CorrespondancePt> scaledPts = pts;
	CTransform3x3 tLeft, tRight;
	MotionFromMatches::IsotropicScaling(scaledPts, tLeft, tRight);

	int ARows = (int) (scaledPts.size() * 2);
	int ACols = 9;
	float *A  = new float[ARows * ACols];
	ENSURE(A != NULL);
	float *ARow1Entry = A;
	float *ARow2Entry = A + ACols;

	for(vector<CorrespondancePt>::const_iterator currCorrespondancePt = scaledPts.begin();
		currCorrespondancePt != scaledPts.end();
		currCorrespondancePt++)
	{
		float sourceX = currCorrespondancePt->first.first;
		float sourceY = currCorrespondancePt->first.second;
		float targetX = currCorrespondancePt->second.first;
		float targetY = currCorrespondancePt->second.second;

		ARow1Entry[0] = sourceX;
		ARow1Entry[1] = sourceY;
		ARow1Entry[2] = 1;
		ARow1Entry[3] = 0;
		ARow1Entry[4] = 0;
		ARow1Entry[5] = 0;
		ARow1Entry[6] = (-targetX) * sourceX;
		ARow1Entry[7] = (-targetX) * sourceY;
		ARow1Entry[8] = -targetX;

		ARow2Entry[0] = 0; 
		ARow2Entry[1] = 0; 
		ARow2Entry[2] = 0; 
		ARow2Entry[3] = sourceX;
		ARow2Entry[4] = sourceY;
		ARow2Entry[5] = 1;
		ARow2Entry[6] = (-targetY) * sourceX;
		ARow2Entry[7] = (-targetY) * sourceY;
		ARow2Entry[8] = -targetY;

		ARow1Entry += (2 * ACols);	
		ARow2Entry += (2 * ACols);
	}

	int info = MotionFromMatches::solveModelUsingLeastEV(A, ARows, ACols, motion.model);

	if(info == 0)
	{
		motion.model = tRight * (motion.model * tLeft.Inverse());
	}

	delete A;

	return info;
}

bool MotionFromMatches::isHomographyInlier(const Feature &sourceFea, const Feature &targetFea,
										   const Motion &motion, float inlierThres)
{
	ENSURE(motion.type == MT_HOMOGRAPHY);

	CVector3 sourcePT(sourceFea.x, sourceFea.y, 1);
	CVector3 targetPT(targetFea.x, targetFea.y, 1);

	CVector3 transPT = motion.model * sourcePT;
	transPT[0]       = transPT[0] / transPT[2];
	transPT[1]       = transPT[1] / transPT[2];

	double diff;
	double dist = 0;
	diff   = (transPT[0] - targetPT[0]);
	dist  += (diff * diff);
	diff   = (transPT[1] - targetPT[1]);
	dist  += (diff * diff);
	dist   = sqrt(dist);

	return (dist <= inlierThres) ? true : false;
}

int MotionFromMatches::solveForRigidAlign(const vector<CorrespondancePt> &pts, Motion &motion)
{
	ENSURE(pts.size() >= MotionFromMatches::MinMatchesToSolveRA);
	ENSURE(motion.type == MT_RIGID_ALIGN);

	vector<CorrespondancePt> scaledPts = pts;
	CTransform3x3 tLeft, tRight;
	MotionFromMatches::IsotropicScaling(scaledPts, tLeft, tRight);

	v3_t* l_pts = new v3_t[scaledPts.size()];
	v3_t* r_pts = new v3_t[scaledPts.size()];
	for(int i = 0; i < (int)scaledPts.size(); i++)	
	{
		l_pts[i] = v3_new(scaledPts[i].first.first,  scaledPts[i].first.second,  1.0);
		r_pts[i] = v3_new(scaledPts[i].second.first, scaledPts[i].second.second, 1.0);
	}

	double mOutput[9], rMat[9], tMat[9], scale;

	align_horn((int)scaledPts.size(),r_pts, l_pts, 
		       rMat, tMat, mOutput, &scale, NULL);
	
	int index = 0;
	for(int y = 0; y < 3; y++)	
	for(int x = 0; x < 3; x++, index++)
	{
		motion.model[y][x] = mOutput[index];
	}
	motion.model[0][0] *= scale;
	motion.model[1][1] *= scale;

	motion.model = tRight * (motion.model * tLeft.Inverse());

	delete[] l_pts;
	delete[] r_pts;

	return 0;
}

bool MotionFromMatches::isRigidAlignInlier(const Feature &sourceFea, const Feature &targetFea,
										   const Motion &motion, float inlierThres)
{
	ENSURE(motion.type == MT_RIGID_ALIGN);

	CVector3 sourcePT(sourceFea.x, sourceFea.y, 1);
	CVector3 targetPT(targetFea.x, targetFea.y, 1);

	CVector3 transPT = motion.model * sourcePT;
	transPT[0]       = transPT[0] / transPT[2];
	transPT[1]       = transPT[1] / transPT[2];

	double diff;
	double dist = 0;
	diff   = (transPT[0] - targetPT[0]);
	dist  += (diff * diff);
	diff   = (transPT[1] - targetPT[1]);
	dist  += (diff * diff);
	dist   = sqrt(dist);

	return (dist <= inlierThres) ? true : false;
}


/*
int MotionFromMatches::solveForFundamentalMatrix(const vector<CorrespondancePt> &pts, Motion &motion)
{
	ENSURE(pts.size() >= MotionFromMatches::MinMatchesToSolveFM);
	ENSURE(motion.type == MT_FUNDAMENTAL_MATRIX);

	vector<CorrespondancePt> scaledPts = pts;
	CTransform3x3 tLeft, tRight;
	MotionFromMatches::IsotropicScaling(scaledPts, tLeft, tRight);

	int ARows = (int) scaledPts.size();
	int ACols = 9;
	float *A  = new float[ARows * ACols];
	ENSURE(A != NULL);
	float *ARow1Entry = A;

	for(vector<CorrespondancePt>::const_iterator currCorrespondancePt = scaledPts.begin();
		currCorrespondancePt != scaledPts.end();
		currCorrespondancePt++)
	{
		float sourceX = currCorrespondancePt->first.first;
		float sourceY = currCorrespondancePt->first.second;
		float targetX = currCorrespondancePt->second.first;
		float targetY = currCorrespondancePt->second.second;

		ARow1Entry[0] = sourceX * targetX;
		ARow1Entry[1] = sourceY * targetX;
		ARow1Entry[2] = targetX;
		ARow1Entry[3] = sourceX * targetY;
		ARow1Entry[4] = sourceY * targetY;
		ARow1Entry[5] = targetY;
		ARow1Entry[6] = sourceX;
		ARow1Entry[7] = sourceY;
		ARow1Entry[8] = 1;

		ARow1Entry += ACols;	
	}

	int info = MotionFromMatches::solveModelUsingLeastEV(A, ARows, ACols, motion.model);
	ENSURE(info == 0);

	if(scaledPts.size() > MotionFromMatches::MinMatchesToSolveFM)
	{
		v3_t* l_pts = new v3_t[scaledPts.size()];
		v3_t* r_pts = new v3_t[scaledPts.size()];
		for(int i = 0; i < (int)scaledPts.size(); i++)	
		{
			l_pts[i] = v3_new(scaledPts[i].first.first,  scaledPts[i].first.second,  1.0);
			r_pts[i] = v3_new(scaledPts[i].second.first, scaledPts[i].second.second, 1.0);
		}

		double fmatrix[9];
		int index = 0;
		for(int y = 0; y < 3; y++)	
		for(int x = 0; x < 3; x++, index++)
		{
			fmatrix[index] = motion.model[y][x];
		}

		double refined_fmatrix[9];
		refine_fmatrix_nonlinear_matches((int) scaledPts.size(), r_pts, l_pts, fmatrix, refined_fmatrix);

		index = 0;
		for(int y = 0; y < 3; y++)	
		for(int x = 0; x < 3; x++, index++)
		{
			motion.model[y][x] = refined_fmatrix[index];
		}

		delete[] l_pts;
		delete[] r_pts;
	}

	motion.model = MotionFromMatches::MakeRank2(motion.model);
	motion.model = motion.model * tLeft.Inverse();
	motion.model = tRight.Inverse().Transpose() * motion.model;

	delete A;

	return 0;
}
*/

bool MotionFromMatches::isFundamentalMatrixInlier(const Feature &sourceFea, const Feature &targetFea,
												  const Motion &motion, float inlierThres)
{
	ENSURE(motion.type == MT_FUNDAMENTAL_MATRIX);

	v3_t l_pt = v3_new(sourceFea.x, sourceFea.y, 1.0);
	v3_t r_pt = v3_new(targetFea.x, targetFea.y, 1.0);

	double ftmp[9];
	int index = 0;
	for(int y = 0; y < 3; y++)
	for(int x = 0; x < 3; x++, index++)	
	{
		ftmp[index] = motion.model[y][x]; 
	}

	double residual = fmatrix_compute_residual(ftmp, r_pt, l_pt);	

	return (residual <= inlierThres) ? true : false;      
}

CTransform3x3 MotionFromMatches::MakeRank2(CTransform3x3 fmatrix)
{
	double A[9];
	double U[9];
	double S[3];
	double VT[9];

	int index = 0;
	for(int y = 0; y < 3; y++)
	for(int x = 0; x < 3; x++, index++)	
	{
		A[index] = fmatrix[y][x]; 
	}

	dgesvd_driver(3, 3, A, U, S, VT);

	CTransform3x3 u;
	CTransform3x3 s = CTransform3x3::Identity();
	CTransform3x3 vt;

	index = 0;
	for(int y = 0; y < 3; y++)
	{
		s[y][y] = S[y];		
		for(int x = 0; x < 3; x++, index++)	
		{
			u[y][x]  = U[index]; 
			vt[y][x] = VT[index]; 
		}
	}

	s[2][2] = 0.0;
	CTransform3x3 singularFMatrix = u * (s * vt);

	return singularFMatrix;
}


void MotionFromMatches::IsotropicScaling(vector<CorrespondancePt> &correspondancePts,
										 CTransform3x3 &tLeft, CTransform3x3 &tRight)
{
	Vector2<float> centroidLeft(0.0f, 0.0f);
	Vector2<float> centroidRight(0.0f, 0.0f);

	for(uint i = 0; i < correspondancePts.size(); i++)
	{
        centroidLeft[0]  += correspondancePts[i].first.first;
		centroidLeft[1]  += correspondancePts[i].first.second;
	    centroidRight[0] += correspondancePts[i].second.first;
		centroidRight[1] += correspondancePts[i].second.second;
	}
	centroidLeft  = centroidLeft  / (float) correspondancePts.size();
	centroidRight = centroidRight / (float) correspondancePts.size();

	float avgDistLeft  = 0.0f;
	float avgDistRight = 0.0f;
	for(uint i = 0; i < correspondancePts.size(); i++)
	{
		correspondancePts[i].first.first   -= centroidLeft[0];
		correspondancePts[i].first.second  -= centroidLeft[1];
		correspondancePts[i].second.first  -= centroidRight[0];
		correspondancePts[i].second.second -= centroidRight[1];

		avgDistLeft  += sqrt(SQR(correspondancePts[i].first.first)  + SQR(correspondancePts[i].first.second));
		avgDistRight += sqrt(SQR(correspondancePts[i].second.first) + SQR(correspondancePts[i].second.second));
	}
	avgDistLeft /= correspondancePts.size();
	avgDistRight /= correspondancePts.size();
	ENSURE(avgDistLeft > 0.0f);
	ENSURE(avgDistRight > 0.0f);	

	float scaleLeft  = sqrt(2.0f) / avgDistLeft;
	float scaleRight = sqrt(2.0f) / avgDistRight;
	for(uint i = 0; i < correspondancePts.size(); i++)
	{
		correspondancePts[i].first.first   *= scaleLeft;
		correspondancePts[i].first.second  *= scaleLeft;
		correspondancePts[i].second.first  *= scaleRight;
		correspondancePts[i].second.second *= scaleRight;
	}

	tRight = CTransform3x3::Scale(scaleRight, scaleRight) *
	         CTransform3x3::Translation(-centroidRight[0], -centroidRight[1]);
	tRight = tRight.Inverse();

	tLeft = CTransform3x3::Scale(scaleLeft, scaleLeft) *
	        CTransform3x3::Translation(-centroidLeft[0], -centroidLeft[1]);
	tLeft = tLeft.Inverse();
}

int MotionFromMatches::solveModelUsingLeastEV(float *A, int ARows, int ACols, CTransform3x3 &model)
{
	float *piA = new float[ACols * ACols];
	ENSURE(piA != NULL);
	uint piIndex = 0;
	for(int piY = 0; piY < ACols; piY++)
	for(int piX = 0; piX < ACols; piX++, piIndex++)
	{
		piA[piIndex] = 0;
		uint aTransIndex = piX;
		uint aIndex      = piY;
		for(int vecI = 0; vecI < ARows; vecI++)
		{
			piA[piIndex] += A[aIndex] * A[aTransIndex];
			aIndex += ACols;
			aTransIndex += ACols;
		}            
	}

	char jobu  = 'N';
	char jobvt = 'O';
	int info;
	int m       = ACols;
	int n       = ACols;
	int lda     = m;
	int ldu     = 1;
	int ldvt    = 1;
	
	float *s    = new float[ACols];
	int lwork   = 603;//(5 * m) * 10;  
	float *work = new float[lwork];	
	ENSURE(s != NULL);
	ENSURE(work != NULL);	
	
	sgesvd(&jobu, &jobvt, &m, &n, piA, &lda, s, NULL, &ldu, NULL, &ldvt, work, &lwork, &info);

	if(info == 0)
	{
		uint index = ACols - 1;
		for(int i = 0; i < 3; i++)
		for(int j = 0; j < 3; j++)
		{
			model[i][j] = piA[index]; 
			index += ACols;
		}
	}

	delete work;
	delete piA;

	return info;
}


int MotionFromMatches::GetMinMatchesToSolveMotion(MotionType type)
{
	int minMatches = INT_MAX;

	switch(type)
	{
	case MT_FUNDAMENTAL_MATRIX:
		minMatches = MinMatchesToSolveFM;
		break;

	case MT_HOMOGRAPHY:
		minMatches = MinMatchesToSolveHG;
		break;

	case MT_RIGID_ALIGN:
		minMatches = MinMatchesToSolveRA;
		break;

	default:
		REPORT_FAILURE("Unknown motion type");
		break;
	}

	return minMatches;
}


/*
int MotionFromMatches::solveForFundamentalMatrix(const vector<CorrespondancePt> &pts, Motion &motion)
{
	ENSURE(pts.size() >= MotionFromMatches::MinMatchesToSolveFM);
	ENSURE(motion.type == MT_FUNDAMENTAL_MATRIX);

	vector<CorrespondancePt> scaledPts = pts;
	//Already implemented by Noah
	//CTransform3x3 tLeft, tRight;
	//MotionFromMatches::IsotropicScaling(scaledPts, tLeft, tRight);

	v3_t* l_pts = new v3_t[scaledPts.size()];
	v3_t* r_pts = new v3_t[scaledPts.size()];
	for(int i = 0; i < (int)scaledPts.size(); i++)	
	{
		l_pts[i] = v3_new(scaledPts[i].first.first,  scaledPts[i].first.second,  1.0);
		r_pts[i] = v3_new(scaledPts[i].second.first, scaledPts[i].second.second, 1.0);
	}

	double foutput[9], e1[3], e2[3];
	double refined_foutput[9];

	estimate_fmatrix_linear((int)scaledPts.size(), r_pts, l_pts, foutput, e1, e2);

	double *solution_foutput = foutput;
	if(scaledPts.size() > MotionFromMatches::MinMatchesToSolveFM)	
	{
		refine_fmatrix_nonlinear_matches((int)scaledPts.size(), r_pts, l_pts, foutput, refined_foutput);
		solution_foutput = refined_foutput;
	}
	
	int index = 0;
	for(int y = 0; y < 3; y++)	
	for(int x = 0; x < 3; x++, index++)
	{
		motion.model[y][x] = solution_foutput[index];
	}

	//Already implemented by Noah
	//motion.model = MotionFromMatches::MakeRank2(motion.model);
	//motion.model = motion.model * tLeft.Inverse();
	//motion.model = tRight.Inverse().Transpose() * motion.model;

	delete[] l_pts;
	delete[] r_pts;

	return 0;
}
*/

///*
int MotionFromMatches::solveForFundamentalMatrix(const vector<CorrespondancePt> &pts, Motion &motion)
{
	ENSURE(pts.size() >= MotionFromMatches::MinMatchesToSolveFM);
	ENSURE(motion.type == MT_FUNDAMENTAL_MATRIX);

	vector<CorrespondancePt> scaledPts = pts;
	//Already implemented by Noah
	//CTransform3x3 tLeft, tRight;
	//MotionFromMatches::IsotropicScaling(scaledPts, tLeft, tRight);

	v3_t* l_pts = new v3_t[scaledPts.size()];
	v3_t* r_pts = new v3_t[scaledPts.size()];
	for(int i = 0; i < (int)scaledPts.size(); i++)	
	{
		l_pts[i] = v3_new(scaledPts[i].first.first,  scaledPts[i].first.second,  1.0);
		r_pts[i] = v3_new(scaledPts[i].second.first, scaledPts[i].second.second, 1.0);
	}

	double foutput[9];
	bool useNonLinearRefine = (scaledPts.size() > MotionFromMatches::MinMatchesToSolveFM);
	estimate_fmatrix((int)scaledPts.size(), r_pts, l_pts, foutput, useNonLinearRefine);

	int index = 0;
	for(int y = 0; y < 3; y++)	
	for(int x = 0; x < 3; x++, index++)
	{
		motion.model[y][x] = foutput[index];
	}

	//Already implemented by Noah
	//motion.model = MotionFromMatches::MakeRank2(motion.model);
	//motion.model = motion.model * tLeft.Inverse();
	//motion.model = tRight.Inverse().Transpose() * motion.model;

	delete[] l_pts;
	delete[] r_pts;

	return 0;
}
//*/

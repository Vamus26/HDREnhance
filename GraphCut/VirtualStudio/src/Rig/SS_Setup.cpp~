#include "SS_Setup.h"
#include <fstream>
#include "Disk.h"
#include "Camera.h"
#include "ImageIO.h"
#include "Rig.h"
#include "RigCalibrator.h"

void SS_Setup::Start(SS_SetupParams ssSetupParams)
{
	this->params = ssSetupParams;
	loadSceneFNs();	
	processCams();
	calibrateScene();
	writeOptFile();
}


void SS_Setup::loadSceneFNs()
{
	ENSURE(this->sceneFrameFNs.size() == 0);

	ifstream inStream(this->params.listFN.c_str());
	ENSURE(inStream.is_open());
	string lineBuff;
	while(std::getline(inStream, lineBuff))
	{
		vector<string> lineTokens;	
		Tokenize(lineBuff, lineTokens, " \t");
		ENSURE(lineTokens.size() > 0);
		this->sceneFrameFNs.push_back(lineTokens[0]);
	}
	inStream.close();

	ENSURE(this->sceneFrameFNs.size() > 0);
}

void SS_Setup::processCams()
{
	ENSURE(this->sceneFrameFNs.size() > 0);

	printf("Processing cameras....\n");

	for(uint iCam = 0; iCam < this->sceneFrameFNs.size(); iCam++)
	{
		string sceneFN = this->sceneFrameFNs[iCam];
		string camID = Disk::GetFileNameID(sceneFN);
		string camDirName = this->params.targetDir + camID + OS_PATH_DELIMIT_STR;
		Disk::MakeDir(camDirName);

		this->camDirNames.push_back(camDirName);

		CFloatImage sceneFrame;
		ImageIO::ReadFile(sceneFrame, sceneFN);

		//if(iCam >= 5)
		//{
		//	if(((iCam - 5) % 10 != 0) &&
		//	   (iCam != 90))
		//	{
		//		//ImageIO::WriteFile(sceneFrame, "1.tga");
		//		sceneFrame = ImageProcessing::GaussianBlur(sceneFrame, 7, 2.0f);
		//		CFloatImage temp;
		//		ImageProcessing::ScaleImage(temp, sceneFrame, 0.2f, false);
		//		ImageProcessing::ScaleImage(sceneFrame, temp, 5.0f, false);
		//		//ImageIO::WriteFile(sceneFrame, "2.tga");
		//		//exit(0);
		//	}
		//}


		Camera currCam(camDirName);
		string camFrameFN = currCam.GetFrameName(0);
		ImageIO::WriteFileTiff(sceneFrame, camFrameFN, CAMERA_ImageCompression); 

		printf("\t %s\n", camID.c_str());
	}

	printf("\tDone.\n");
}

void SS_Setup::calibrateScene()
{
	ENSURE(this->camDirNames.size() > 0);

	printf("Calibrating scene....\n");

	Rig::RigParams rigParams = Rig::RigParams::Default();
	rigParams.cameraNames = this->camDirNames;
	for(uint iCam = 1; iCam < this->sceneFrameFNs.size(); iCam++)
	{

		string sceneFN = this->sceneFrameFNs[iCam];
		string camID = Disk::GetFileNameID(sceneFN);

		string prevSceneFN = this->sceneFrameFNs[iCam - 1];
		string prevCamID = Disk::GetFileNameID(prevSceneFN);

		CamPair camPair;
		camPair.cam1ID = camID;
		camPair.cam2ID = prevCamID;
		camPair.dist = 1.0f;

		rigParams.camNeighPairs.push_back(camPair);
	}

	Rig rig;
	rig.Load(rigParams);

	RigCalibrator::RigCalibratorParams rigCalibParams = RigCalibrator::RigCalibratorParams::Default();
	//bug
	//rigCalibParams.useNoahCalib = true;
	rigCalibParams.useDrewCalib = true;
	rigCalibParams.invertHandedness = true;
	rigCalibParams.minViewsForScenePoint = this->params.minViewsForScenePoint;
	rigCalibParams.calibFN = this->params.targetDir + this->params.noahBundleFN;

	RigCalibrator rigCalibrator(&rig);
	rigCalibrator.Calibrate(rigCalibParams);

	//Gets rid of cameras that didn't load (i.e. zero focal length)
	this->camDirNames.clear();
	vector<string> sceneFrameFNsBak = this->sceneFrameFNs;
	this->sceneFrameFNs.clear();
	for(uint iCam = 0; iCam < rig.cameras.size(); iCam++)
	{
		if(rig.cameras[iCam].cameraMats.cameraMatsLoaded == true)
		{
			this->camDirNames.push_back(rig.cameras[iCam].path);
			this->sceneFrameFNs.push_back(sceneFrameFNsBak[iCam]);
		}
	}

	printf("\tDone.\n");
}

void SS_Setup::writeOptFile()
{
	ENSURE(this->camDirNames.size() > 0);
	ENSURE(this->params.neighSpacing > 0);

	ofstream outStream(this->params.optFN.c_str());
	ENSURE(outStream.is_open());

	for(uint iCam = 0; iCam < this->camDirNames.size(); iCam++)
	{
		outStream << "Rig.camera=" << this->camDirNames[iCam] << "\n";
	}

	outStream << "\n";

	for(int iCam = 0; iCam < (int) this->camDirNames.size(); iCam++)
	{
		string sceneFN = this->sceneFrameFNs[iCam];
		string camID = Disk::GetFileNameID(sceneFN);

		if((iCam - this->params.neighSpacing) >= 0)
		{
			string prevSceneFN = this->sceneFrameFNs[iCam - this->params.neighSpacing];
			string prevCamID = Disk::GetFileNameID(prevSceneFN);

			outStream << "Rig.camNeighPair " << prevCamID << " " << camID << " 1.0f\n";
		}
	}

	outStream.close();
}

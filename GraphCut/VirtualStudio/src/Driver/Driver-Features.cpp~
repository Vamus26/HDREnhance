#include "Driver.h"
#include "Disk.h"
#include "FeatureSet.h"
#include "FeatureMatcher.h"
#include "FeatureRenderer.h"
#include "MotionFromMatches.h"

void Driver::combineFeatures()
{
	ENSURE(this->params.genericParams.strList1.size() > 0);
	ENSURE(this->params.genericParams.strList2.size() == 0);
	ENSURE(this->params.genericParams.intList.size() == 0);
	ENSURE(this->params.genericParams.floatList.size() == 0);

	for(vector<string>::const_iterator currImgID = this->params.genericParams.strList1.begin();
		currImgID != this->params.genericParams.strList1.end();
		currImgID++)
	{
		printf("Combining features - %s\n", currImgID->c_str());

		FeatureSet currImgFeaSet;
		loadFeatureSet(*currImgID, currImgFeaSet);
		PRINT_INT(currImgFeaSet.size());

		string combinedFeaSetFN = *currImgID + FEA_EXT; 
		ENSURE(Disk::DoesFileExist(combinedFeaSetFN));

		printf("\tDone\n\n");
	}	
}

void Driver::matchFeatures()
{
	ENSURE(this->params.genericParams.strList1.size() > 0);
	ENSURE(this->params.genericParams.strList1.size() ==
		   this->params.genericParams.strList2.size());
	ENSURE(this->params.genericParams.intList.size() == 0);
	ENSURE(this->params.genericParams.floatList.size() == 0);


	for(vector<string>::const_iterator img1ID = this->params.genericParams.strList1.begin(),
		                               img2ID = this->params.genericParams.strList2.begin();
		img1ID != this->params.genericParams.strList1.end();
		img1ID++, img2ID++)
	{	
		printf("Computing matches - (%s,%s) \n", img1ID->c_str(), img2ID->c_str());

		FeatureSet img1FeaSet, img2FeaSet;
		FeatureMatcher::FeatureMatcherParams feaMatcherParams;
		feaMatcherParams.loadFromFileIfAvaliable = false;
		feaMatcherParams.writeToFile = true;
		FeatureMatches feaMatches;
		loadFeatureMatches(*img1ID, *img2ID, 
						    img1FeaSet, img2FeaSet,
							feaMatches, feaMatcherParams);
		PRINT_INT(feaMatches.size());

		printf("\tDone\n\n");
	}
}

void Driver::computeFeaFM()
{
	ENSURE(this->params.genericParams.strList1.size() > 0);
	ENSURE(this->params.genericParams.strList1.size() ==
		   this->params.genericParams.strList2.size());
	ENSURE(this->params.genericParams.intList.size() == 0);
	ENSURE(this->params.genericParams.floatList.size() == 0);


	for(vector<string>::const_iterator img1ID = this->params.genericParams.strList1.begin(),
		                               img2ID = this->params.genericParams.strList2.begin();
		img1ID != this->params.genericParams.strList1.end();
		img1ID++, img2ID++)
	{	
		printf("Computing fmatrix - (%s,%s) \n", img1ID->c_str(), img2ID->c_str());

		FeatureSet img1FeaSet, img2FeaSet;
		FeatureMatches feaMatches;
		FeatureMatcher::FeatureMatcherParams feaMatcherParams = this->params.feaMatcherParams;
		feaMatcherParams.loadFromFileIfAvaliable = true;
		feaMatcherParams.writeToFile = true;
		loadFeatureMatches(*img1ID, *img2ID, 
						    img1FeaSet, img2FeaSet,
							feaMatches, feaMatcherParams);
		PRINT_INT(feaMatches.size());

		FeatureMatchSet motionInliers;
		MotionFromMatches mfm(img1FeaSet, img2FeaSet, feaMatches);
		Motion fmatrix = mfm.GetDominantMotion(motionInliers, MT_FUNDAMENTAL_MATRIX, this->params.mfmParams);		
		PRINT_INT(motionInliers.size());

		/*
		if(motionInliers.size() != 0)
		{
			printf("Refining matches and fmatrix\n");

			FeatureMatcher::FeatureMatcherParams feaMatcherParams = this->params.feaMatcherParams;
			feaMatcherParams.loadFromFileIfAvaliable = false;
			feaMatcherParams.writeToFile = true;
			feaMatcherParams.dataFileName = *img1ID + "-" + Disk::GetBaseFileName(*img2ID) + ".matches";
			
			FeatureMatcher feaMatcher(img1FeaSet, img2FeaSet);
			feaMatches.clear();
			feaMatcher.ComputeMatching(feaMatches, fmatrix, feaMatcherParams);
			PRINT_INT(feaMatches.size());

			motionInliers.clear();
			MotionFromMatches mfm(img1FeaSet, img2FeaSet, feaMatches);
			fmatrix = mfm.GetDominantMotion(motionInliers, MT_FUNDAMENTAL_MATRIX, this->params.mfmParams);
			PRINT_INT(motionInliers.size());
		}
		//*/

		string motionFN = Disk::GetBaseFileName(*img1ID) + "-" + Disk::GetBaseFileName(*img2ID) + ".fm";
		fmatrix.WriteToFile(motionFN);


		fmatrix.model = CameraMats::CenterFMatrixCoordSys(fmatrix.model, 
														  ImageIO::GetImageShape(*img1ID + CAMERA_ImageExt),
														  ImageIO::GetImageShape(*img2ID + CAMERA_ImageExt));
		motionFN = Disk::GetBaseFileName(*img1ID) + "-" + Disk::GetBaseFileName(*img2ID) + ".center-fm";
		fmatrix.WriteToFile(motionFN);

		printf("\tDone\n\n");
	}
}


void Driver::loadFeatureMatches(string img1ID, string img2ID, 
							    FeatureSet &img1FeaSet, FeatureSet &img2FeaSet,
							    FeatureMatches &feaMatches,
								FeatureMatcher::FeatureMatcherParams feaMatcherParams)
{
	loadFeatureSet(img1ID, img1FeaSet);
	loadFeatureSet(img2ID, img2FeaSet);

	feaMatcherParams.dataFileName = img1ID + "-" + Disk::GetBaseFileName(img2ID) + ".matches";
	FeatureMatcher feaMatcher(img1FeaSet, img2FeaSet);
	feaMatcher.ComputeMatching(feaMatches, feaMatcherParams);
	if(feaMatcherParams.writeToFile)
	{
		ENSURE(Disk::DoesFileExist(feaMatcherParams.dataFileName));
	}
}

void Driver::loadFeatureSet(string imgID, FeatureSet &featureSet)
{	
	CShape imgShape = ImageIO::GetImageShape(imgID + CAMERA_ImageExt);
	featureSet.LoadAll(imgID, imgShape);
}

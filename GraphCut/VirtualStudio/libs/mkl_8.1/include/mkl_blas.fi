!*******************************************************************************
!                              INTEL CONFIDENTIAL
!   Copyright(C) 1999-2006 Intel Corporation. All Rights Reserved.
!   The source code contained  or  described herein and all documents related to
!   the source code ("Material") are owned by Intel Corporation or its suppliers
!   or licensors.  Title to the  Material remains with  Intel Corporation or its
!   suppliers and licensors. The Material contains trade secrets and proprietary
!   and  confidential  information of  Intel or its suppliers and licensors. The
!   Material  is  protected  by  worldwide  copyright  and trade secret laws and
!   treaty  provisions. No part of the Material may be used, copied, reproduced,
!   modified, published, uploaded, posted, transmitted, distributed or disclosed
!   in any way without Intel's prior express written permission.
!   No license  under any  patent, copyright, trade secret or other intellectual
!   property right is granted to or conferred upon you by disclosure or delivery
!   of the Materials,  either expressly, by implication, inducement, estoppel or
!   otherwise.  Any  license  under  such  intellectual property  rights must be
!   express and approved by Intel in writing.
!
!*******************************************************************************
!  Content:
!      Intel(R) Math Kernel Library (MKL) FORTRAN interface for BLAS routines
!*******************************************************************************


      interface to
     $subroutine saxpy(n,sa,sx,incx,sy,incy)
      real       sx(*),sy(*),sa
      integer    incx,incy,n
      end

      interface to
     $subroutine scopy(n,sx,incx,sy,incy)
      real       sx(*),sy(*)
      integer    incx,incy,n
      end

      interface to
     $real function sdot(n,sx,incx,sy,incy)
      real       sx(*),sy(*)
      integer    incx,incy,n
      end

      interface to
     $subroutine sscal(n,sa,sx,incx)
      real       sa,sx(*)
      integer    incx,n
      end

      interface to
     $subroutine sswap (n,sx,incx,sy,incy)
      real       sx(*),sy(*)
      integer    incx,incy,n
      end

      interface to
     $real function snrm2 ( n, x, incx )
      integer    incx, n
      real       x( * )
      end

      interface to
     $integer function isamax(n,sx,incx)
      real       sx(*)
      integer    incx,n
      end

      interface to
     $integer function isamin(n,sx,incx)
      real       sx(*)
      integer    incx, n
      end

      interface to
     $subroutine srot (n,sx,incx,sy,incy,c,s)
      real       sx(*),sy(*),c,s
      integer    incx,incy,n
      end

      interface to
     $subroutine srotg(sa,sb,c,s)
      real       sa,sb,c,s
      end

      interface to
     $real function sasum(n,sx,incx)
      real       sx(*)
      integer    incx,n
      end

      interface to
     $subroutine saxpyi( nz, a, x, indx, y )
      integer    nz, indx (*)
      real       y (*), x (*), a
      end

      interface to
     $real function sdoti( nz, x, indx, y )
      integer    nz, indx (*)
      real       x (*), y (*)
      end

      interface to
     $subroutine sgthr( nz, y, x, indx )
      integer    nz, indx (*)
      real       y (*), x (*)
      end

      interface to
     $subroutine sgthrz( nz, y, x, indx )
      integer    nz, indx (*)
      real       y (*), x (*)
      end

      interface to
     $subroutine sroti( nz, x, indx, y, c, s )
      integer    nz, indx (*)
      real       x (*), y (*), c, s
      end

      interface to
     $subroutine srotm (n,sx,incx,sy,incy,sparam)
      real       sx, sy, sparam
      integer    n, incx, incy
      end

      interface to
     $subroutine srotmg (sd1,sd2,sx1,sy1,sparam)
      real       sd1, sd2, sx1, sy1, sparam
      end

      interface to
     $subroutine ssctr ( nz, x, indx, y )
      integer    nz, indx (*)
      real       x (*), y (*)
      end

      interface to
     $double precision function dcabs1(z)
      double complex   z
      end

      interface to
     $subroutine daxpy(n,da,dx,incx,dy,incy)
      double precision dx(*),dy(*),da
      integer          incx,incy,n
      end

      interface to
     $subroutine  dcopy(n,dx,incx,dy,incy)
      double precision dx(*),dy(*)
      integer          incx,incy,n
      end

      interface to
     $double precision function ddot(n,dx,incx,dy,incy)
      double precision dx(*),dy(*)
      integer          incx,incy,n
      end

      interface to
     $subroutine  dscal(n,da,dx,incx)
      double precision da,dx(*)
      integer          incx,n
      end

      interface to
     $subroutine  dswap (n,dx,incx,dy,incy)
      double precision dx(*),dy(*)
      integer          incx,incy,n
      end

      interface to
     $double precision function dnrm2 ( n, x, incx )
      integer          incx, n
      double precision x( * )
      end

      interface to
     $integer function idamax(n,dx,incx)
      double precision dx(*)
      integer          incx,n
      end

      interface to
     $integer function idamin(n,dx,incx)
      double precision dx(*)
      integer          incx, n
      end

      interface to
     $subroutine  drot (n,dx,incx,dy,incy,c,s)
      double precision dx(*),dy(*),c,s
      integer          incx,incy,n
      end

      interface to
     $subroutine drotg(da,db,c,s)
      double precision da,db,c,s
      end

      interface to
     $double precision function dasum(n,dx,incx)
      double precision dx(*)
      integer          incx,n
      end

      interface to
     $subroutine daxpyi( nz, a, x, indx, y )
      integer          nz, indx (*)
      double precision y (*), x (*), a
      end

      interface to
     $double precision function ddoti( nz, x, indx, y )
      integer          nz, indx (*)
      double precision x (*), y (*)
      end

      interface to
     $subroutine dgthr( nz, y, x, indx )
      integer          nz, indx (*)
      double precision y (*), x (*)
      end

      interface to
     $subroutine dgthrz( nz, y, x, indx )
      integer          nz, indx (*)
      double precision y (*), x (*)
      end

      interface to
     $subroutine droti( nz, x, indx, y, c, s )
      integer           nz, indx (*)
      double precision  x (*), y (*), c, s
      end

      interface to
     $subroutine drotm(n,dx,incx,dy,incy,dparam)
      double precision dparam, dx, dy
      integer          n,incx,incy
      end

      interface to
     $subroutine drotmg(dd1,dd2,dx1,dy1,dparam)
      double precision dd1, dd2, dx1, dy1, dparam
      end

      interface to
     $subroutine dsctr( nz, x, indx, y )
      integer          nz, indx (*)
      double precision x (*), y (*)
      end

      interface to
     $subroutine caxpy(n,ca,cx,incx,cy,incy)
      complex    cx(*),cy(*),ca
      integer    incx,incy,n
      end

      interface to
     $subroutine ccopy(n,cx,incx,cy,incy)
      complex    cx(*),cy(*)
      integer    incx,incy,n
      end

      interface to
     $complex function cdotc(n,cx,incx,cy,incy)
      complex    cx(*),cy(*)
      integer    incx,incy,n
      end

      interface to
     $complex function cdotu(n,cx,incx,cy,incy)
      complex    cx(*),cy(*)
      integer    incx,incy,n
      end

      interface to
     $subroutine cscal(n,ca,cx,incx)
      complex    ca,cx(*)
      integer    incx,n
      end

      interface to
     $subroutine csscal(n,sa,cx,incx)
      complex    cx(*)
      real       sa
      integer    incx,n
      end

      interface to
     $subroutine cswap(n,cx,incx,cy,incy)
      complex    cx(*),cy(*)
      integer    incx,incy,n
      end

      interface to
     $real function scnrm2( n, x, incx )
      integer    incx, n
      complex    x( * )
      end

      interface to
     $integer function icamax(n,cx,incx)
      complex    cx(*)
      integer    incx,n
      end

      interface to
     $integer function icamin(n,cx,incx)
      complex    cx(*)
      integer    incx, n
      end

      interface to
     $subroutine csrot (n,sx,incx,sy,incy,c,s)
      integer    n
      complex    sx(*), sy(*)
      real       c, s
      integer    incx, incy
      end

      interface to
     $subroutine crotg(ca,cb,c,s)
      complex    ca,cb,s
      real       c
      end

      interface to
     $real function scasum(n,cx,incx)
      complex    cx(*)
      integer    incx,n
      end

      interface to
     $subroutine caxpyi( nz, a, x, indx, y )
      integer    nz, indx (*)
      complex    y (*), x (*), a
      end

      interface to
     $complex function cdotci( nz, x, indx, y )
      integer    nz, indx (*)
      complex    x (*), y (*)
      end

      interface to
     $complex function cdotui( nz, x, indx, y )
      integer    nz, indx (*)
      complex    x (*), y (*)
      end

      interface to
     $subroutine cgthr( nz, y, x, indx )
      integer    nz, indx (*)
      complex    y (*), x (*)
      end

      interface to
     $subroutine cgthrz( nz, y, x, indx )
      integer    nz, indx (*)
      complex    y (*), x (*)
      end

      interface to
     $subroutine csctr( nz, x, indx, y )
      integer    nz, indx (*)
      complex    x (*), y (*)
      end

      interface to
     $subroutine zaxpy(n,za,zx,incx,zy,incy)
      double complex zx(*),zy(*),za
      integer        incx,incy,n
      end

      interface to
     $subroutine  zcopy(n,zx,incx,zy,incy)
      double complex zx(*),zy(*)
      integer        incx,incy,n
      end

      interface to
     $double complex function zdotc(n,zx,incx,zy,incy)
      double complex zx(*),zy(*)
      integer        incx,incy,n
      end

      interface to
     $double complex function zdotu(n,zx,incx,zy,incy)
      double complex zx(*),zy(*)
      integer        incx,incy,n
      end

      interface to
     $subroutine  zscal(n,za,zx,incx)
      double complex za,zx(*)
      integer        incx,n
      end

      interface to
     $subroutine  zdscal(n,da,zx,incx)
      double complex   zx(*)
      double precision da
      integer          incx,n
      end

      interface to
     $subroutine  zswap (n,zx,incx,zy,incy)
      double complex zx(*),zy(*)
      integer        incx,incy,n
      end

      interface to
     $double precision function dznrm2( n, x, incx )
      integer        incx, n
      complex*16     x( * )
      end

      interface to
     $integer function izamax(n,zx,incx)
      double complex zx(*)
      integer        incx,n
      end

      interface to
     $integer function izamin(n,zx,incx)
      double complex zx(*)
      integer        incx, n
      end

      interface to
     $subroutine zdrot(n,dx,incx,dy,incy,c,s)
      double complex   dx(1), dy(1)
      double precision c, s
      integer          incx, incy, n
      end

      interface to
     $subroutine zrotg(ca,cb,c,s)
      double complex   ca,cb,s
      double precision c
      end

      interface to
     $double precision function dzasum(n,zx,incx)
      double complex   zx(*)
      integer          incx,n
      end

      interface to
     $subroutine zaxpyi( nz, a, x, indx, y )
      integer          nz, indx (*)
      complex*16       y (*), x (*), a
      end

      interface to
     $function zdotci( nz, x, indx, y )
      integer          nz, indx (*)
      complex*16       x (*), y (*), zdotci
      end

      interface to
     $function zdotui( nz, x, indx, y )
      integer          nz, indx (*)
      complex*16       x (*), y (*), zdotui
      end

      interface to
     $subroutine zgthr( nz, y, x, indx )
      integer          nz, indx (*)
      complex*16       y (*), x (*)
      end

      interface to
     $subroutine zgthrz( nz, y, x, indx )
      integer          nz, indx (*)
      complex*16       y (*), x (*)
      end

      interface to
     $subroutine zsctr( nz, x, indx, y )
      integer          nz, indx (*)
      complex*16       x (*), y (*)
      end

      interface to
     $subroutine sgemv ( trans, m, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      real               alpha, beta
      integer            incx, incy, lda, m, n
      character*1        trans
      real               a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine sger  ( m, n, alpha, x, incx, y, incy, a, lda )
      real               alpha
      integer            incx, incy, lda, m, n
      real               a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine strsv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      real               a( lda, * ), x( * )
      end

      interface to
     $subroutine sgbmv ( trans, m, n, kl, ku, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      real               alpha, beta
      integer            incx, incy, kl, ku, lda, m, n
      character*1        trans
      real               a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine ssbmv ( uplo, n, k, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      real               alpha, beta
      integer            incx, incy, k, lda, n
      character*1        uplo
      real               a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine sspmv ( uplo, n, alpha, ap, x, incx, beta, y, incy )
      real               alpha, beta
      integer            incx, incy, n
      character*1        uplo
      real               ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine ssymv ( uplo, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      real               alpha, beta
      integer            incx, incy, lda, n
      character*1        uplo
      real               a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine strmv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      real               a( lda, * ), x( * )
      end

      interface to
     $subroutine stbmv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      real               a( lda, * ), x( * )
      end

      interface to
     $subroutine stbsv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      real               a( lda, * ), x( * )
      end

      interface to
     $subroutine stpmv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      real               ap( * ), x( * )
      end

      interface to
     $subroutine stpsv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      real               ap( * ), x( * )
      end

      interface to
     $subroutine ssyr  ( uplo, n, alpha, x, incx, a, lda )
      real               alpha
      integer            incx, lda, n
      character*1        uplo
      real               a( lda, * ), x( * )
      end

      interface to
     $subroutine sspr  ( uplo, n, alpha, x, incx, ap )
      real               alpha
      integer            incx, n
      character*1        uplo
      real               ap( * ), x( * )
      end

      interface to
     $subroutine sspr2 ( uplo, n, alpha, x, incx, y, incy, ap )
      real               alpha
      integer            incx, incy, n
      character*1        uplo
      real               ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine ssyr2 ( uplo, n, alpha, x, incx, y, incy, a, lda )
      real               alpha
      integer            incx, incy, lda, n
      character*1        uplo
      real               a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine dgemv ( trans, m, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      double precision   alpha, beta
      integer            incx, incy, lda, m, n
      character*1        trans
      double precision   a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine dger  ( m, n, alpha, x, incx, y, incy, a, lda )
      double precision   alpha
      integer            incx, incy, lda, m, n
      double precision   a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine dtrsv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      double precision   a( lda, * ), x( * )
      end

      interface to
     $subroutine dgbmv ( trans, m, n, kl, ku, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      double precision   alpha, beta
      integer            incx, incy, kl, ku, lda, m, n
      character*1        trans
      double precision   a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine dsbmv ( uplo, n, k, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      double precision   alpha, beta
      integer            incx, incy, k, lda, n
      character*1        uplo
      double precision   a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine dspmv ( uplo, n, alpha, ap, x, incx, beta, y, incy )
      double precision   alpha, beta
      integer            incx, incy, n
      character*1        uplo
      double precision   ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine dsymv ( uplo, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      double precision   alpha, beta
      integer            incx, incy, lda, n
      character*1        uplo
      double precision   a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine dtrmv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      double precision   a( lda, * ), x( * )
      end

      interface to
     $subroutine dtbmv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      double precision   a( lda, * ), x( * )
      end

      interface to
     $subroutine dtbsv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      double precision   a( lda, * ), x( * )
      end

      interface to
     $subroutine dtpmv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      double precision   ap( * ), x( * )
      end

      interface to
     $subroutine dtpsv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      double precision   ap( * ), x( * )
      end

      interface to
     $subroutine dsyr  ( uplo, n, alpha, x, incx, a, lda )
      double precision   alpha
      integer            incx, lda, n
      character*1        uplo
      double precision   a( lda, * ), x( * )
      end

      interface to
     $subroutine dspr  ( uplo, n, alpha, x, incx, ap )
      double precision   alpha
      integer            incx, n
      character*1        uplo
      double precision   ap( * ), x( * )
      end

      interface to
     $subroutine dspr2 ( uplo, n, alpha, x, incx, y, incy, ap )
      double precision   alpha
      integer            incx, incy, n
      character*1        uplo
      double precision   ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine dsyr2 ( uplo, n, alpha, x, incx, y, incy, a, lda )
      double precision   alpha
      integer            incx, incy, lda, n
      character*1        uplo
      double precision   a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine cgemv ( trans, m, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex            alpha, beta
      integer            incx, incy, lda, m, n
      character*1        trans
      complex            a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine cgerc ( m, n, alpha, x, incx, y, incy, a, lda )
      complex            alpha
      integer            incx, incy, lda, m, n
      complex            a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine cgeru ( m, n, alpha, x, incx, y, incy, a, lda )
      complex            alpha
      integer            incx, incy, lda, m, n
      complex            a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine ctrsv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      complex            a( lda, * ), x( * )
      end

      interface to
     $subroutine cgbmv ( trans, m, n, kl, ku, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex            alpha, beta
      integer            incx, incy, kl, ku, lda, m, n
      character*1        trans
      complex            a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine chbmv ( uplo, n, k, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex            alpha, beta
      integer            incx, incy, k, lda, n
      character*1        uplo
      complex            a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine chpmv ( uplo, n, alpha, ap, x, incx, beta, y, incy )
      complex            alpha, beta
      integer            incx, incy, n
      character*1        uplo
      complex            ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine chemv ( uplo, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex            alpha, beta
      integer            incx, incy, lda, n
      character*1        uplo
      complex            a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine ctrmv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      complex            a( lda, * ), x( * )
      end

      interface to
     $subroutine ctbmv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      complex            a( lda, * ), x( * )
      end

      interface to
     $subroutine ctbsv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      complex            a( lda, * ), x( * )
      end

      interface to
     $subroutine ctpmv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      complex            ap( * ), x( * )
      end

      interface to
     $subroutine ctpsv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      complex            ap( * ), x( * )
      end

      interface to
     $subroutine cher  ( uplo, n, alpha, x, incx, a, lda )
      real               alpha
      integer            incx, lda, n
      character*1        uplo
      complex            a( lda, * ), x( * )
      end

      interface to
     $subroutine chpr  ( uplo, n, alpha, x, incx, ap )
      real               alpha
      integer            incx, n
      character*1        uplo
      complex            ap( * ), x( * )
      end

      interface to
     $subroutine chpr2 ( uplo, n, alpha, x, incx, y, incy, ap )
      complex            alpha
      integer            incx, incy, n
      character*1        uplo
      complex            ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine cher2 ( uplo, n, alpha, x, incx, y, incy, a, lda )
      complex            alpha
      integer            incx, incy, lda, n
      character*1        uplo
      complex            a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine zgemv ( trans, m, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex*16         alpha, beta
      integer            incx, incy, lda, m, n
      character*1        trans
      complex*16         a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine zgerc ( m, n, alpha, x, incx, y, incy, a, lda )
      complex*16         alpha
      integer            incx, incy, lda, m, n
      complex*16         a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine zgeru ( m, n, alpha, x, incx, y, incy, a, lda )
      complex*16         alpha
      integer            incx, incy, lda, m, n
      complex*16         a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine ztrsv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      complex*16         a( lda, * ), x( * )
      end

      interface to
     $subroutine zgbmv ( trans, m, n, kl, ku, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex*16         alpha, beta
      integer            incx, incy, kl, ku, lda, m, n
      character*1        trans
      complex*16         a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine zhbmv ( uplo, n, k, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex*16         alpha, beta
      integer            incx, incy, k, lda, n
      character*1        uplo
      complex*16         a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine zhpmv ( uplo, n, alpha, ap, x, incx, beta, y, incy )
      complex*16         alpha, beta
      integer            incx, incy, n
      character*1        uplo
      complex*16         ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine zhemv ( uplo, n, alpha, a, lda, x, incx,
     $                   beta, y, incy )
      complex*16         alpha, beta
      integer            incx, incy, lda, n
      character*1        uplo
      complex*16         a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine ztrmv ( uplo, trans, diag, n, a, lda, x, incx )
      integer            incx, lda, n
      character*1        diag, trans, uplo
      complex*16         a( lda, * ), x( * )
      end

      interface to
     $subroutine ztbmv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      complex*16         a( lda, * ), x( * )
      end

      interface to
     $subroutine ztbsv ( uplo, trans, diag, n, k, a, lda, x, incx )
      integer            incx, k, lda, n
      character*1        diag, trans, uplo
      complex*16         a( lda, * ), x( * )
      end

      interface to
     $subroutine ztpmv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      complex*16         ap( * ), x( * )
      end

      interface to
     $subroutine ztpsv ( uplo, trans, diag, n, ap, x, incx )
      integer            incx, n
      character*1        diag, trans, uplo
      complex*16         ap( * ), x( * )
      end

      interface to
     $subroutine zher  ( uplo, n, alpha, x, incx, a, lda )
      double precision   alpha
      integer            incx, lda, n
      character*1        uplo
      complex*16         a( lda, * ), x( * )
      end

      interface to
     $subroutine zhpr  ( uplo, n, alpha, x, incx, ap )
      double precision   alpha
      integer            incx, n
      character*1        uplo
      complex*16         ap( * ), x( * )
      end

      interface to
     $subroutine zhpr2 ( uplo, n, alpha, x, incx, y, incy, ap )
      complex*16         alpha
      integer            incx, incy, n
      character*1        uplo
      complex*16         ap( * ), x( * ), y( * )
      end

      interface to
     $subroutine zher2 ( uplo, n, alpha, x, incx, y, incy, a, lda )
      complex*16         alpha
      integer            incx, incy, lda, n
      character*1        uplo
      complex*16         a( lda, * ), x( * ), y( * )
      end

      interface to
     $subroutine sgemm ( transa, transb, m, n, k, alpha, a, lda, 
     $                   b, ldb, beta, c, ldc )
      character*1        transa, transb
      integer            m, n, k, lda, ldb, ldc
      real               alpha, beta
      real               a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine ssymm ( side, uplo, m, n, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        side, uplo
      integer            m, n, lda, ldb, ldc
      real               alpha, beta
      real               a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine ssyrk ( uplo, trans, n, k, alpha, a, lda,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldc
      real               alpha, beta
      real               a( lda, * ), c( ldc, * )
      end

      interface to
     $subroutine ssyr2k( uplo, trans, n, k, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldb, ldc
      real               alpha, beta
      real               a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine strmm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      real               alpha
      real               a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine strsm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      real               alpha
      real               a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine dgemm ( transa, transb, m, n, k, alpha, a, lda, 
     $                   b, ldb, beta, c, ldc )
      character*1        transa, transb
      integer            m, n, k, lda, ldb, ldc
      double precision   alpha, beta
      double precision   a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine dsymm ( side, uplo, m, n, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        side, uplo
      integer            m, n, lda, ldb, ldc
      double precision   alpha, beta
      double precision   a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine dsyrk ( uplo, trans, n, k, alpha, a, lda,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldc
      double precision   alpha, beta
      double precision   a( lda, * ), c( ldc, * )
      end

      interface to
     $subroutine dsyr2k( uplo, trans, n, k, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldb, ldc
      double precision   alpha, beta
      double precision   a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine dtrmm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      double precision   alpha
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine dtrsm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      double precision   alpha
      double precision   a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine cgemm ( transa, transb, m, n, k, alpha, a, lda, 
     $                   b, ldb, beta, c, ldc )
      character*1        transa, transb
      integer            m, n, k, lda, ldb, ldc
      complex            alpha, beta
      complex            a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine csymm ( side, uplo, m, n, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        side, uplo
      integer            m, n, lda, ldb, ldc
      complex            alpha, beta
      complex            a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine chemm ( side, uplo, m, n, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        side, uplo
      integer            m, n, lda, ldb, ldc
      complex            alpha, beta
      complex            a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine csyrk ( uplo, trans, n, k, alpha, a, lda,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldc
      complex            alpha, beta
      complex            a( lda, * ), c( ldc, * )
      end

      interface to
     $subroutine cherk ( uplo, trans, n, k, alpha, a, lda,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldc
      real               alpha, beta
      complex            a( lda, * ), c( ldc, * )
      end

      interface to
     $subroutine csyr2k( uplo, trans, n, k, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldb, ldc
      complex            alpha, beta
      complex            a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine cher2k( uplo, trans, n, k, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldb, ldc
      real               beta
      complex            alpha
      complex            a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine ctrmm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      complex            alpha
      complex            a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine ctrsm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      complex            alpha
      complex            a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine zgemm ( transa, transb, m, n, k, alpha, a, lda, 
     $                   b, ldb, beta, c, ldc )
      character*1        transa, transb
      integer            m, n, k, lda, ldb, ldc
      complex*16         alpha, beta
      complex*16         a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine zsymm ( side, uplo, m, n, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        side, uplo
      integer            m, n, lda, ldb, ldc
      complex*16         alpha, beta
      complex*16         a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine zhemm ( side, uplo, m, n, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        side, uplo
      integer            m, n, lda, ldb, ldc
      complex*16         alpha, beta
      complex*16         a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine zsyrk ( uplo, trans, n, k, alpha, a, lda,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldc
      complex*16         alpha, beta
      complex*16         a( lda, * ), c( ldc, * )
      end

      interface to
     $subroutine zherk( uplo, trans, n, k, alpha, a, lda, beta, 
     $                  c, ldc )
      character          trans, uplo
      integer            k, lda, ldc, n
      double precision   alpha, beta
      complex*16         a( lda, * ), c( ldc, * )
      end

      interface to
     $subroutine zsyr2k( uplo, trans, n, k, alpha, a, lda, b, ldb,
     $                   beta, c, ldc )
      character*1        uplo, trans
      integer            n, k, lda, ldb, ldc
      complex*16         alpha, beta
      complex*16         a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine zher2k( uplo, trans, n, k, alpha, a, lda, b, ldb, 
     $                   beta, c, ldc )
      character          trans, uplo
      integer            k, lda, ldb, ldc, n
      double precision   beta
      complex*16         alpha
      complex*16         a( lda, * ), b( ldb, * ), c( ldc, * )
      end

      interface to
     $subroutine ztrmm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      complex*16         alpha
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine ztrsm ( side, uplo, transa, diag, m, n, alpha, a, lda,
     $                   b, ldb )
      character*1        side, uplo, transa, diag
      integer            m, n, lda, ldb
      complex*16         alpha
      complex*16         a( lda, * ), b( ldb, * )
      end

      interface to
     $subroutine xerbla( srname, info )
      character*6        srname
      integer            info
      end


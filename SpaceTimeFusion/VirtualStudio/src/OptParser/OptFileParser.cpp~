#include "OptFileParser.h"
#include <fstream>

#pragma warning(disable: 4127)

bool OptFileParser::readImgFilter(string option, ImageFilter &imgFilter, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{
		ENSURE(optVals.size() == 1);

		if(optVals[0].compare("IF_NO_OP") == 0)
		{
			imgFilter = IF_NO_OP;
		}
		else if(optVals[0].compare("IF_LAB_COLOR_TRANSFER") == 0)
		{
			imgFilter = IF_LAB_COLOR_TRANSFER;
		}
		else
		{
			REPORT_FAILURE("Unknown Image Filter - %s.", optVals[0].c_str());
		}
		
		return true;
	}

	return false;    
}

bool OptFileParser::readAppOp(string option, AppOperation &appOP, string optStr, vector<string> &optVals)
{	
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);

		if(optVals[0].compare("OP_EXTRACT_SEQ_DATA") == 0)
		{
			appOP = OP_EXTRACT_SEQ_DATA;
		}
		else if(optVals[0].compare("OP_CALIBRATE_RIG_CAMERAS") == 0)
		{
			appOP = OP_CALIBRATE_RIG_CAMERAS;
		}
		else if(optVals[0].compare("OP_OUTPUT_RIG_FRAME") == 0)
		{
			appOP = OP_OUTPUT_RIG_FRAME;
		}
		else if(optVals[0].compare("OP_GENERATE_RIG_FMATRICES") == 0)
		{
			appOP = OP_GENERATE_RIG_FMATRICES;
		}		
		else if(optVals[0].compare("OP_COMPUTE_STEREO") == 0)
		{
			appOP = OP_COMPUTE_STEREO;
		}
		else if(optVals[0].compare("OP_COMPUTE_STEREO_ITER") == 0)
		{
			appOP = OP_COMPUTE_STEREO_ITER;
		}
		else if(optVals[0].compare("OP_ADVANCE_STEREO_ITER") == 0)
		{
			appOP = OP_ADVANCE_STEREO_ITER;
		}
		else if(optVals[0].compare("OP_COMPUTE_STEREO_RECONSTRUCTION") == 0)
		{
			appOP = OP_COMPUTE_STEREO_RECONSTRUCTION;
		}
		else if(optVals[0].compare("OP_COMPUTE_FLOW") == 0)
		{
			appOP = OP_COMPUTE_FLOW;
		}
		else if(optVals[0].compare("OP_SETUP_STATIC_SCENE") == 0)
		{
			appOP = OP_SETUP_STATIC_SCENE;
		}
		else
		{
			REPORT_FAILURE("Unknown app operation - %s.", optVals[0].c_str());
		}
		
		return true;
	}

	return false;
}


bool OptFileParser::readBool(string option, bool &boolTarget, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);

		if(optVals[0].compare("true") == 0)
		{
			boolTarget = true;
		}
		else if(optVals[0].compare("false") == 0)
		{
			boolTarget = false;
		}
		else
		{
			REPORT_FAILURE("Invalid bool val - %s", optVals[0].c_str());

		}
		return true;
	}

	return false;
}

bool OptFileParser::readInt(string option, int &intTarget, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);
		int matched = sscanf(optVals[0].c_str(), "%i", &intTarget);
		ENSURE(matched == 1);

		return true;
	}

	return false;
}


bool OptFileParser::readFloat(string option, float &floatTarget, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);
		int matched = sscanf(optVals[0].c_str(), "%f", &floatTarget);
		ENSURE(matched == 1);

		return true;
	}

	return false;
}

bool OptFileParser::readDouble(string option, double &doubleTarget, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);
		int matched = sscanf(optVals[0].c_str(), "%lf", &doubleTarget);
		ENSURE(matched == 1);

		return true;
	}

	return false;
}


bool OptFileParser::addString(string option, vector<string> &strArray, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);
		strArray.push_back(optVals[0]);
		return true;
	}

	return false;
}


bool OptFileParser::addCamPair(string option, vector<CamPair> &camPairArray, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 3);
		CamPair newPair;
		newPair.cam1ID = optVals[0];
		newPair.cam2ID = optVals[1];
		newPair.dist   = (float) atof(optVals[2].c_str());
		camPairArray.push_back(newPair);
		return true;
	}

	return false;
}

bool OptFileParser::addDirName(string option, vector<string> &strArray, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);
		string dirStr = optVals[0];
		if(dirStr[dirStr.size() - 1] != OS_PATH_DELIMIT)
		{
			dirStr += OS_PATH_DELIMIT_STR;
		}		
		strArray.push_back(dirStr);
		return true;
	}

	return false;
}




bool OptFileParser::readString(string option, string &strTarget, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);
		strTarget = optVals[0];
		return true;
	}

	return false;
}

bool OptFileParser::readDirName(string option, string &strTarget, string optStr, vector<string> &optVals)
{
	if(optStr.compare(option) == 0)
	{			
		ENSURE(optVals.size() == 1);
		strTarget = optVals[0];
		if(strTarget[strTarget.size() - 1] != OS_PATH_DELIMIT)
		{
			strTarget += OS_PATH_DELIMIT_STR;
		}		
		return true;
	}

	return false;
}


void OptFileParser::neutralizePaths(string &line)
{
	for(uint i = 0; i < line.length(); i++)
	{
		if(line[i] == WRONG_OS_PATH_DELIMIT)
		{
			line[i] = OS_PATH_DELIMIT;
		}
	}
}


OptFileParser::OptFileParams OptFileParser::Load(const char* optionsFileName, char* argv[], bool dumpOptionsRead)
{
	OptFileParams params = OptFileParams::Default();

	vector<string> optStrings;

	ifstream inputStream(optionsFileName);
	ENSURE(inputStream.is_open());
	string lineBuff;
	while(std::getline(inputStream, lineBuff))
	{
		optStrings.push_back(lineBuff);
	}
	inputStream.close();

	int argI = 0;
	while(argv[argI] != NULL)
	{
		char charBuff[1024];
		sprintf(charBuff, "%s", argv[argI]);
		string lineBuff(charBuff);
		optStrings.push_back(lineBuff);
		argI++;
	}
    	
	for(uint iOptStr = 0; iOptStr < optStrings.size(); iOptStr++)
	{
		vector<string> lineTokens;	
		string lineBuff = optStrings[iOptStr];

		neutralizePaths(lineBuff);

		if(lineBuff.size() == 0) continue;
		if(lineBuff[0] == '#')   continue;

		lineTokens.clear();
		Tokenize(lineBuff, lineTokens, " \t=");
		if(lineTokens.size() == 0) continue;

		if(lineTokens.size() < 2)
		{
			PRINT_INT(iOptStr);
			PRINT_STRING(lineTokens[0]);
			ENSURE(lineTokens.size() >= 2);
		}		

		string optStr = lineTokens[0];
		lineTokens.erase(lineTokens.begin(), lineTokens.begin() + 1);

		bool optStrMatched = false;

		optStrMatched |= readInt(   "seed",  params.seed,  optStr, lineTokens);
		optStrMatched |= readAppOp( "appOP", params.appOP, optStr, lineTokens);
		if(optStrMatched == true) continue;

		optStrMatched |= readRigParams(params, optStr, lineTokens);
		if(optStrMatched == true) continue;

		optStrMatched |= readRigCalibratorParams(params, optStr, lineTokens);
		if(optStrMatched == true) continue;

		optStrMatched |= readStereoParams(params, optStr, lineTokens);
		if(optStrMatched == true) continue;

		optStrMatched |= readStereoReconstructionParams(params, optStr, lineTokens);
		if(optStrMatched == true) continue;

		optStrMatched |= readSS_SetupParams(params, optStr, lineTokens);
		if(optStrMatched == true) continue;

		optStrMatched |= readSegmenterParams(params, optStr, lineTokens);
		if(optStrMatched == true) continue;		

		if(optStrMatched == false)
		{
			REPORT_FAILURE("Unknown option: %s\n", optStr.c_str());
		}
	}

	if(dumpOptionsRead == true)
	{
		params.Dump();
	}
	
	return params;
}

bool OptFileParser::readRigParams(OptFileParams &params, string optStr, vector<string> lineTokens)
{
	bool optStrMatched = false;

	optStrMatched |= addDirName( "Rig.camera",          params.rigParams.cameraNames,         optStr, lineTokens);
	optStrMatched |= addCamPair( "Rig.camNeighPair",    params.rigParams.camNeighPairs,       optStr, lineTokens);
	optStrMatched |= readInt(    "Rig.startFrameIndex", params.rigParams.frameSeq.startIndex, optStr, lineTokens);
	optStrMatched |= readInt(    "Rig.endFrameIndex",   params.rigParams.frameSeq.endIndex,   optStr, lineTokens);
	optStrMatched |= readBool(   "Rig.halfSizeCamMats", params.rigParams.halfSizeCamMats,     optStr, lineTokens);	
	optStrMatched |= readBool(   "Rig.useGeoCamDists",  params.rigParams.useGeoCamDists,      optStr, lineTokens);	
	optStrMatched |= readDirName("Rig.outDir",          params.rigParams.outDir,              optStr, lineTokens);
	
	return optStrMatched;
}

bool OptFileParser::readRigCalibratorParams(OptFileParams &params, string optStr, vector<string> lineTokens)
{
	bool optStrMatched = false;

	optStrMatched |= readInt(    "RigCalibrator.framesToFind",     params.rigCalibratorParams.framesToFind,                optStr, lineTokens);
	optStrMatched |= readInt(    "RigCalibrator.startFrameIndex",  params.rigCalibratorParams.frameSeqToSearch.startIndex, optStr, lineTokens);
	optStrMatched |= readInt(    "RigCalibrator.endFrameIndex",    params.rigCalibratorParams.frameSeqToSearch.endIndex,   optStr, lineTokens);
	optStrMatched |= readInt(    "RigCalibrator.maxSharpenIters",  params.rigCalibratorParams.maxSharpenIters,             optStr, lineTokens);
	optStrMatched |= readString( "RigCalibrator.refCamID",         params.rigCalibratorParams.refCamID,                    optStr, lineTokens);
	optStrMatched |= readBool(   "RigCalibrator.useNoahCalib",     params.rigCalibratorParams.useNoahCalib,                optStr, lineTokens);
	optStrMatched |= readBool(   "RigCalibrator.useLarryCalib",    params.rigCalibratorParams.useLarryCalib,               optStr, lineTokens);
	optStrMatched |= readString( "RigCalibrator.calibFN",          params.rigCalibratorParams.calibFN,                     optStr, lineTokens);
	optStrMatched |= readBool(   "RigCalibrator.invertHandedness", params.rigCalibratorParams.invertHandedness,            optStr, lineTokens);

	return optStrMatched;
}

bool OptFileParser::readStereoParams(OptFileParams &params, string optStr, vector<string> lineTokens)
{
	bool optStrMatched = false;

	optStrMatched |= readString("Stereo.refCamID",               params.stereoParams.refCamID,               optStr, lineTokens);
	optStrMatched |= readDouble("Stereo.minDepth",               params.stereoParams.minDepth,               optStr, lineTokens);
	optStrMatched |= readDouble("Stereo.maxDepth",               params.stereoParams.maxDepth,               optStr, lineTokens);
	optStrMatched |= readFloat( "Stereo.noiseVar",               params.stereoParams.noiseVar,               optStr, lineTokens);
	optStrMatched |= readInt(   "Stereo.dataCostExp",            params.stereoParams.dataCostExp,            optStr, lineTokens);
	optStrMatched |= readBool(  "Stereo.processInMem",           params.stereoParams.processInMem,           optStr, lineTokens);
	optStrMatched |= readInt(   "Stereo.bpIters",                params.stereoParams.bpIters,                optStr, lineTokens);
	optStrMatched |= readFloat( "Stereo.pixelDistBetweenDepths", params.stereoParams.pixelDistBetweenDepths, optStr, lineTokens);
	optStrMatched |= readInt(   "Stereo.spatialKernelSize",      params.stereoParams.spatialKernelSize,      optStr, lineTokens);
	optStrMatched |= readInt(   "Stereo.camIndex",               params.stereoParams.camIndex,               optStr, lineTokens);
	
	return optStrMatched;
}


bool OptFileParser::readStereoReconstructionParams(OptFileParams &params, string optStr, vector<string> lineTokens)
{
	bool optStrMatched = false;

	optStrMatched |= readInt(   "StereoReconstruction.iFrame",      params.srParams.iFrame,      optStr, lineTokens);
	optStrMatched |= readString("StereoReconstruction.targetCamID", params.srParams.targetCamID, optStr, lineTokens);
	optStrMatched |= addString( "StereoReconstruction.srsCamID",    params.srParams.srsCamIDs,   optStr, lineTokens);

	return optStrMatched;
}

bool OptFileParser::readSS_SetupParams(OptFileParams &params, string optStr, vector<string> lineTokens)
{
	bool optStrMatched = false;

	optStrMatched |= readDirName("SS_Setup.targetDir",             params.ssSetupParams.targetDir,             optStr, lineTokens);
	optStrMatched |= readInt(    "SS_Setup.neighSpacing",          params.ssSetupParams.neighSpacing,          optStr, lineTokens);
	optStrMatched |= readInt(    "SS_Setup.minViewsForScenePoint", params.ssSetupParams.minViewsForScenePoint, optStr, lineTokens);
	optStrMatched |= readBool(   "SS_Setup.invertHandedness",      params.ssSetupParams.invertHandedness,      optStr, lineTokens);

	return optStrMatched;
}

bool OptFileParser::readSegmenterParams(OptFileParams &params, string optStr, vector<string> lineTokens)
{
	bool optStrMatched = false;

	optStrMatched |= readInt("Segmenter.smoothingLevel", params.stereoParams.segmenterParams.smoothingLevel, optStr, lineTokens);

	int speedUpLevel;
	bool speedUpOptFound = readInt("Segmenter.speedUp", speedUpLevel, optStr, lineTokens);
	if(speedUpOptFound)
	{
		CHECK_RANGE(speedUpLevel, NO_SPEEDUP, HIGH_SPEEDUP);
		params.stereoParams.segmenterParams.speedUp = (SpeedUpLevel) speedUpLevel;
		optStrMatched = true;
	}

	return optStrMatched;
}

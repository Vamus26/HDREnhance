#include "RigCalibrator.h"

//check - save points data and use in stereo
void RigCalibrator::loadNoahDrewCalibFile(int minViewsForScenePoint, bool drewMode)
{
	ENSURE(minViewsForScenePoint >= 0);

	printf("Loading Noah calib from - %s...\n", this->params.calibFN.c_str());

	ifstream inStream(params.calibFN.c_str());
	ENSURE(inStream.is_open());

	if(drewMode == true)
	{
		string fileHeader;
		inStream >> fileHeader;
		ENSURE(fileHeader.compare(RIG_CALIBRATOR_DrewFileHeader) == 0); 
	}

	int cameraCount = 0;
	int pointCount  = 0;

	inStream >> cameraCount; 
	inStream >> pointCount; 
	ENSURE(cameraCount > 0);
	ENSURE(cameraCount == (int) this->rig->cameras.size());
	ENSURE(pointCount > 0);

	for(int iCam = 0; iCam < cameraCount; iCam++)
	{
		Camera &currCam = this->rig->cameras[iCam];
		CShape frameShape = currCam.GetFrameShape(0);

		currCam.cameraMats.ReadCameraNoah(inStream, frameShape.width, frameShape.height);
		if(currCam.cameraMats.cameraMatsLoaded)
		{
			if(this->params.invertHandedness)
			{
				currCam.cameraMats.InvertHandedness();
			}

			string camFN = currCam.GetCameraMatsFN();
			currCam.cameraMats.WriteCamera(camFN);
			currCam.scenePoints.clear();
		}
	}

	for(int iPoint = 0; iPoint < pointCount; iPoint++)
	{
		CVector3 scenePt, dummyPt;
		scenePt.Read(inStream);
		dummyPt.Read(inStream);

		int viewCount;
		inStream >> viewCount;
		for(int iView = 0; iView < viewCount; iView++)
		{
			int iCam, iFea;
			inStream >> iCam;
			inStream >> iFea;
			if(drewMode)
			{
				float dummy;
				inStream >> dummy;
			}
			if(viewCount >= minViewsForScenePoint)
			{
				if(this->rig->cameras[iCam].cameraMats.cameraMatsLoaded)
					this->rig->cameras[iCam].scenePoints.push_back(scenePt);
			}			
		}
	}

	int spCount = 0;
	for(int iCam = 0; iCam < cameraCount; iCam++)
	{		
		Camera &currCam = this->rig->cameras[iCam];
		if(currCam.cameraMats.cameraMatsLoaded)
		{
			currCam.WriteScenePts();
			printf("\t Cam-%s: %i\n", currCam.id.c_str(), (int) currCam.scenePoints.size());
			spCount += (int) currCam.scenePoints.size();
		}
	}
	printf("\t Total scene points: %i\n", spCount);

	inStream.close();
}


void RigCalibrator::loadLarryCalibFile()
{
	printf("Loading Larry calib from - %s...\n", this->params.calibFN.c_str());

	ifstream inStream(params.calibFN.c_str());
	ENSURE(inStream.is_open());

	int cameraCount = (int) this->rig->cameras.size();

	for(int iCam = 0; iCam < cameraCount; iCam++)
	{
		Camera &currCam = this->rig->cameras[iCam];

		printf("\t Cam-%s\n", currCam.id.c_str());

		currCam.cameraMats.ReadCameraLarry(inStream);

		string camFN = currCam.GetCameraMatsFN();
		currCam.cameraMats.WriteCamera(camFN);
	}

	inStream.close();
}
